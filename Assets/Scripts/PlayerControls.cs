//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Prefabs/Characters/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Combat Action Map"",
            ""id"": ""de953d80-ed95-44cf-84a3-dedffe1c2ce9"",
            ""actions"": [
                {
                    ""name"": ""8-Dir Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7a413ce3-1005-4ae6-981d-ef7b35cb1bdb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""9fdecb3a-14d9-43aa-8580-9c90a2d36e2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard Arrows"",
                    ""id"": ""6a305bcb-9e57-445d-88a2-1dc17ff119bf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""8-Dir Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""801e5205-b163-4bf9-966b-224ed698bdc4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControlScheme"",
                    ""action"": ""8-Dir Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1662de02-bb10-4c7c-8fd2-c1b3ed095916"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControlScheme"",
                    ""action"": ""8-Dir Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b8d55ed4-139b-45e7-9e3e-8897ac44a983"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControlScheme"",
                    ""action"": ""8-Dir Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8f46ff77-7e23-4bfe-baf0-d924f8974efb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControlScheme"",
                    ""action"": ""8-Dir Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3933bdf2-47aa-499d-a57d-a80b0b0434d2"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControlScheme"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerControlScheme"",
            ""bindingGroup"": ""PlayerControlScheme"",
            ""devices"": []
        }
    ]
}");
        // Combat Action Map
        m_CombatActionMap = asset.FindActionMap("Combat Action Map", throwIfNotFound: true);
        m_CombatActionMap__8DirMovement = m_CombatActionMap.FindAction("8-Dir Movement", throwIfNotFound: true);
        m_CombatActionMap_Dash = m_CombatActionMap.FindAction("Dash", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Combat Action Map
    private readonly InputActionMap m_CombatActionMap;
    private List<ICombatActionMapActions> m_CombatActionMapActionsCallbackInterfaces = new List<ICombatActionMapActions>();
    private readonly InputAction m_CombatActionMap__8DirMovement;
    private readonly InputAction m_CombatActionMap_Dash;
    public struct CombatActionMapActions
    {
        private @PlayerControls m_Wrapper;
        public CombatActionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @_8DirMovement => m_Wrapper.m_CombatActionMap__8DirMovement;
        public InputAction @Dash => m_Wrapper.m_CombatActionMap_Dash;
        public InputActionMap Get() { return m_Wrapper.m_CombatActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActionMapActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionMapActionsCallbackInterfaces.Add(instance);
            @_8DirMovement.started += instance.On_8DirMovement;
            @_8DirMovement.performed += instance.On_8DirMovement;
            @_8DirMovement.canceled += instance.On_8DirMovement;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(ICombatActionMapActions instance)
        {
            @_8DirMovement.started -= instance.On_8DirMovement;
            @_8DirMovement.performed -= instance.On_8DirMovement;
            @_8DirMovement.canceled -= instance.On_8DirMovement;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(ICombatActionMapActions instance)
        {
            if (m_Wrapper.m_CombatActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActionMapActions @CombatActionMap => new CombatActionMapActions(this);
    private int m_PlayerControlSchemeSchemeIndex = -1;
    public InputControlScheme PlayerControlSchemeScheme
    {
        get
        {
            if (m_PlayerControlSchemeSchemeIndex == -1) m_PlayerControlSchemeSchemeIndex = asset.FindControlSchemeIndex("PlayerControlScheme");
            return asset.controlSchemes[m_PlayerControlSchemeSchemeIndex];
        }
    }
    public interface ICombatActionMapActions
    {
        void On_8DirMovement(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
}
