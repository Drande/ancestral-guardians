//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Prefabs/Characters/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""CombatActions"",
            ""id"": ""be5ace49-3844-4d0d-89c6-577c31caa796"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""587e62f4-865b-4a58-8437-b83756202846"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""df9bd194-6741-493d-8d3f-e30dced794e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""5dbd06f5-5a5d-4741-b3d7-5f49e649da88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialAttack"",
                    ""type"": ""Button"",
                    ""id"": ""8f4eba37-0263-4e4b-9317-c2d6a209d51f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Parry"",
                    ""type"": ""Button"",
                    ""id"": ""f90d5f02-e17d-4c3e-96d0-218ae702994c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard arrows"",
                    ""id"": ""e9e6890f-6b4c-4875-aa05-74b49d105eea"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c2af016e-670d-45c0-9844-7cafe5791171"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d8c0e0a2-2098-4d79-90be-675db0a8e1a5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""02e3c01a-f784-46cd-940e-f7e19fb0ad81"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ca84a209-9b50-4ad5-b002-da8427408462"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""5ca3c1c5-1294-4493-b7d4-ddc00446affb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d5ffa574-3e18-4efe-8f2c-4b047299a0e5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""509abae0-bccd-41d4-86dc-c461824997a2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""49d8a477-891e-446f-8680-c24a9f6956e5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""26ff6d32-bc89-4e3b-b320-79f54c5fb9e0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""81404e6c-6168-4058-95af-1a964c40c662"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""141b0e88-a745-4ed4-881e-521a297df2be"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""887b3671-9ea8-4548-9372-24d1e2b710c4"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d479d4c-b235-410a-b415-b768f8d222eb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1166c5a5-4dd4-4815-893d-020071353ec7"",
                    ""path"": ""<Keyboard>/#(C)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2a4de18-e835-4707-989d-7320816d5ef6"",
                    ""path"": ""<Keyboard>/#(X)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c7d73a3-2abe-4024-a061-e8b879c28df8"",
                    ""path"": ""<Keyboard>/#(Z)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Parry"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EnvironmentActions"",
            ""id"": ""f0b03560-d0e1-4959-8197-9c439c977744"",
            ""actions"": [
                {
                    ""name"": ""ToggleMute"",
                    ""type"": ""Button"",
                    ""id"": ""360f9db5-399a-4283-b735-0d9ade001c7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a23b440b-badf-41e9-8168-9bd5ee372c27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""45bd2cca-98d3-4097-bd1e-0dfb4dec0f79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed29e788-d059-4720-af98-4d6a70f0b6ef"",
                    ""path"": ""<Keyboard>/#(M)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleMute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eca87ac9-e327-40db-98f4-d94ab0c4f9e6"",
                    ""path"": ""<Keyboard>/#(E)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""378d47cf-c09d-477f-9e48-a8b56cad8398"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad2f91d3-62ac-4e74-a90c-a283e2454057"",
                    ""path"": ""<Keyboard>/#(P)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CombatActions
        m_CombatActions = asset.FindActionMap("CombatActions", throwIfNotFound: true);
        m_CombatActions_Movement = m_CombatActions.FindAction("Movement", throwIfNotFound: true);
        m_CombatActions_Dash = m_CombatActions.FindAction("Dash", throwIfNotFound: true);
        m_CombatActions_Attack = m_CombatActions.FindAction("Attack", throwIfNotFound: true);
        m_CombatActions_SpecialAttack = m_CombatActions.FindAction("SpecialAttack", throwIfNotFound: true);
        m_CombatActions_Parry = m_CombatActions.FindAction("Parry", throwIfNotFound: true);
        // EnvironmentActions
        m_EnvironmentActions = asset.FindActionMap("EnvironmentActions", throwIfNotFound: true);
        m_EnvironmentActions_ToggleMute = m_EnvironmentActions.FindAction("ToggleMute", throwIfNotFound: true);
        m_EnvironmentActions_Interact = m_EnvironmentActions.FindAction("Interact", throwIfNotFound: true);
        m_EnvironmentActions_Pause = m_EnvironmentActions.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CombatActions
    private readonly InputActionMap m_CombatActions;
    private List<ICombatActionsActions> m_CombatActionsActionsCallbackInterfaces = new List<ICombatActionsActions>();
    private readonly InputAction m_CombatActions_Movement;
    private readonly InputAction m_CombatActions_Dash;
    private readonly InputAction m_CombatActions_Attack;
    private readonly InputAction m_CombatActions_SpecialAttack;
    private readonly InputAction m_CombatActions_Parry;
    public struct CombatActionsActions
    {
        private @PlayerControls m_Wrapper;
        public CombatActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CombatActions_Movement;
        public InputAction @Dash => m_Wrapper.m_CombatActions_Dash;
        public InputAction @Attack => m_Wrapper.m_CombatActions_Attack;
        public InputAction @SpecialAttack => m_Wrapper.m_CombatActions_SpecialAttack;
        public InputAction @Parry => m_Wrapper.m_CombatActions_Parry;
        public InputActionMap Get() { return m_Wrapper.m_CombatActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActionsActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @SpecialAttack.started += instance.OnSpecialAttack;
            @SpecialAttack.performed += instance.OnSpecialAttack;
            @SpecialAttack.canceled += instance.OnSpecialAttack;
            @Parry.started += instance.OnParry;
            @Parry.performed += instance.OnParry;
            @Parry.canceled += instance.OnParry;
        }

        private void UnregisterCallbacks(ICombatActionsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @SpecialAttack.started -= instance.OnSpecialAttack;
            @SpecialAttack.performed -= instance.OnSpecialAttack;
            @SpecialAttack.canceled -= instance.OnSpecialAttack;
            @Parry.started -= instance.OnParry;
            @Parry.performed -= instance.OnParry;
            @Parry.canceled -= instance.OnParry;
        }

        public void RemoveCallbacks(ICombatActionsActions instance)
        {
            if (m_Wrapper.m_CombatActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActionsActions @CombatActions => new CombatActionsActions(this);

    // EnvironmentActions
    private readonly InputActionMap m_EnvironmentActions;
    private List<IEnvironmentActionsActions> m_EnvironmentActionsActionsCallbackInterfaces = new List<IEnvironmentActionsActions>();
    private readonly InputAction m_EnvironmentActions_ToggleMute;
    private readonly InputAction m_EnvironmentActions_Interact;
    private readonly InputAction m_EnvironmentActions_Pause;
    public struct EnvironmentActionsActions
    {
        private @PlayerControls m_Wrapper;
        public EnvironmentActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleMute => m_Wrapper.m_EnvironmentActions_ToggleMute;
        public InputAction @Interact => m_Wrapper.m_EnvironmentActions_Interact;
        public InputAction @Pause => m_Wrapper.m_EnvironmentActions_Pause;
        public InputActionMap Get() { return m_Wrapper.m_EnvironmentActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EnvironmentActionsActions set) { return set.Get(); }
        public void AddCallbacks(IEnvironmentActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_EnvironmentActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EnvironmentActionsActionsCallbackInterfaces.Add(instance);
            @ToggleMute.started += instance.OnToggleMute;
            @ToggleMute.performed += instance.OnToggleMute;
            @ToggleMute.canceled += instance.OnToggleMute;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IEnvironmentActionsActions instance)
        {
            @ToggleMute.started -= instance.OnToggleMute;
            @ToggleMute.performed -= instance.OnToggleMute;
            @ToggleMute.canceled -= instance.OnToggleMute;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IEnvironmentActionsActions instance)
        {
            if (m_Wrapper.m_EnvironmentActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEnvironmentActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_EnvironmentActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EnvironmentActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EnvironmentActionsActions @EnvironmentActions => new EnvironmentActionsActions(this);
    public interface ICombatActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSpecialAttack(InputAction.CallbackContext context);
        void OnParry(InputAction.CallbackContext context);
    }
    public interface IEnvironmentActionsActions
    {
        void OnToggleMute(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
